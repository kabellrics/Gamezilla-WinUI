//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace GameZilla
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        private global::GameZilla.GameZilla_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::GameZilla.GameZilla_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace GameZilla.GameZilla_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[47];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "WinUIEx.WindowEx";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "String";
            _typeNameTable[8] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[9] = "WinUIEx.Icon";
            _typeNameTable[10] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[11] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[12] = "System.Enum";
            _typeNameTable[13] = "System.ValueType";
            _typeNameTable[14] = "WinUIEx.SystemBackdrop";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[17] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[18] = "GameZilla.MainWindow";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[20] = "Microsoft.UI.Xaml.CornerRadius";
            _typeNameTable[21] = "GameZilla.Views.ContainerPage";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[24] = "GameZilla.ViewModels.ContainerViewModel";
            _typeNameTable[25] = "CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient";
            _typeNameTable[26] = "CommunityToolkit.Mvvm.ComponentModel.ObservableObject";
            _typeNameTable[27] = "GameZilla.Views.HomePage";
            _typeNameTable[28] = "GameZilla.ViewModels.HomeViewModel";
            _typeNameTable[29] = "GameZilla.Views.ItemDetailPage";
            _typeNameTable[30] = "GameZilla.ViewModels.ItemDetailViewModel";
            _typeNameTable[31] = "GameZilla.Views.ItemListDetailPage";
            _typeNameTable[32] = "GameZilla.ViewModels.ItemListDetailViewModel";
            _typeNameTable[33] = "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView";
            _typeNameTable[34] = "Microsoft.UI.Xaml.Controls.GridView";
            _typeNameTable[35] = "Microsoft.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[36] = "System.Windows.Input.ICommand";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Controls.ItemsPanelTemplate";
            _typeNameTable[38] = "CommunityToolkit.WinUI.UI.Animations.Connected";
            _typeNameTable[39] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[40] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[41] = "GameZilla.Views.ItemListPage";
            _typeNameTable[42] = "GameZilla.ViewModels.ItemListViewModel";
            _typeNameTable[43] = "CommunityToolkit.WinUI.UI.Converters.BoolToVisibilityConverter";
            _typeNameTable[44] = "CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter";
            _typeNameTable[45] = "GameZilla.Views.SplashPage";
            _typeNameTable[46] = "GameZilla.ViewModels.SplashViewModel";

            _typeTable = new global::System.Type[47];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::WinUIEx.WindowEx);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::System.String);
            _typeTable[8] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[9] = typeof(global::WinUIEx.Icon);
            _typeTable[10] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[11] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
            _typeTable[12] = typeof(global::System.Enum);
            _typeTable[13] = typeof(global::System.ValueType);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[14] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[17] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[18] = typeof(global::GameZilla.MainWindow);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.CornerRadius);
            _typeTable[21] = typeof(global::GameZilla.Views.ContainerPage);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[24] = typeof(global::GameZilla.ViewModels.ContainerViewModel);
            _typeTable[25] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient);
            _typeTable[26] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableObject);
            _typeTable[27] = typeof(global::GameZilla.Views.HomePage);
            _typeTable[28] = typeof(global::GameZilla.ViewModels.HomeViewModel);
            _typeTable[29] = typeof(global::GameZilla.Views.ItemDetailPage);
            _typeTable[30] = typeof(global::GameZilla.ViewModels.ItemDetailViewModel);
            _typeTable[31] = typeof(global::GameZilla.Views.ItemListDetailPage);
            _typeTable[32] = typeof(global::GameZilla.ViewModels.ItemListDetailViewModel);
            _typeTable[33] = typeof(global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView);
            _typeTable[34] = typeof(global::Microsoft.UI.Xaml.Controls.GridView);
            _typeTable[35] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsControl);
            _typeTable[36] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsPanelTemplate);
            _typeTable[38] = typeof(global::CommunityToolkit.WinUI.UI.Animations.Connected);
            _typeTable[39] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[40] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[41] = typeof(global::GameZilla.Views.ItemListPage);
            _typeTable[42] = typeof(global::GameZilla.ViewModels.ItemListViewModel);
            _typeTable[43] = typeof(global::CommunityToolkit.WinUI.UI.Converters.BoolToVisibilityConverter);
            _typeTable[44] = typeof(global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter);
            _typeTable[45] = typeof(global::GameZilla.Views.SplashPage);
            _typeTable[46] = typeof(global::GameZilla.ViewModels.SplashViewModel);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_15_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_18_MainWindow() { return new global::GameZilla.MainWindow(); }
        private object Activate_21_ContainerPage() { return new global::GameZilla.Views.ContainerPage(); }
        private object Activate_24_ContainerViewModel() { return new global::GameZilla.ViewModels.ContainerViewModel(); }
        private object Activate_27_HomePage() { return new global::GameZilla.Views.HomePage(); }
        private object Activate_28_HomeViewModel() { return new global::GameZilla.ViewModels.HomeViewModel(); }
        private object Activate_29_ItemDetailPage() { return new global::GameZilla.Views.ItemDetailPage(); }
        private object Activate_30_ItemDetailViewModel() { return new global::GameZilla.ViewModels.ItemDetailViewModel(); }
        private object Activate_31_ItemListDetailPage() { return new global::GameZilla.Views.ItemListDetailPage(); }
        private object Activate_33_AdaptiveGridView() { return new global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView(); }
        private object Activate_41_ItemListPage() { return new global::GameZilla.Views.ItemListPage(); }
        private object Activate_43_BoolToVisibilityConverter() { return new global::CommunityToolkit.WinUI.UI.Converters.BoolToVisibilityConverter(); }
        private object Activate_44_BoolToObjectConverter() { return new global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter(); }
        private object Activate_45_SplashPage() { return new global::GameZilla.Views.SplashPage(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WinUIEx.WindowEx
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_4_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("Title");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Double
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  String
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  WinUIEx.Icon
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 12:   //  System.Enum
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 13:   //  System.ValueType
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  WinUIEx.SystemBackdrop
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_15_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 18:   //  GameZilla.MainWindow
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_18_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Left");
                userType.AddMemberName("Top");
                userType.AddMemberName("Right");
                userType.AddMemberName("Bottom");
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Xaml.CornerRadius
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("TopLeft");
                userType.AddMemberName("TopRight");
                userType.AddMemberName("BottomRight");
                userType.AddMemberName("BottomLeft");
                xamlType = userType;
                break;

            case 21:   //  GameZilla.Views.ContainerPage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_ContainerPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  GameZilla.ViewModels.ContainerViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableObject"));
                xamlType = userType;
                break;

            case 26:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableObject
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 27:   //  GameZilla.Views.HomePage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_HomePage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  GameZilla.ViewModels.HomeViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  GameZilla.Views.ItemDetailPage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_ItemDetailPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  GameZilla.ViewModels.ItemDetailViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  GameZilla.Views.ItemListDetailPage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_ItemListDetailPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  GameZilla.ViewModels.ItemListDetailViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_33_AdaptiveGridView;
                userType.AddMemberName("DesiredWidth");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("ItemClickCommand");
                userType.AddMemberName("StretchContentForSingleRow");
                userType.AddMemberName("OneRowModeEnabled");
                userType.AddMemberName("ItemsPanel");
                xamlType = userType;
                break;

            case 34:   //  Microsoft.UI.Xaml.Controls.GridView
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Microsoft.UI.Xaml.Controls.ItemsControl
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  System.Windows.Input.ICommand
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.Controls.ItemsPanelTemplate
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  CommunityToolkit.WinUI.UI.Animations.Connected
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("ListItemElementName");
                userType.AddMemberName("ListItemKey");
                userType.AddMemberName("Key");
                userType.AddMemberName("AnchorElement");
                xamlType = userType;
                break;

            case 39:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  GameZilla.Views.ItemListPage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_ItemListPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  GameZilla.ViewModels.ItemListViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  CommunityToolkit.WinUI.UI.Converters.BoolToVisibilityConverter
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter"));
                userType.Activator = Activate_43_BoolToVisibilityConverter;
                xamlType = userType;
                break;

            case 44:   //  CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_44_BoolToObjectConverter;
                userType.AddMemberName("TrueValue");
                userType.AddMemberName("FalseValue");
                xamlType = userType;
                break;

            case 45:   //  GameZilla.Views.SplashPage
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_SplashPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  GameZilla.ViewModels.SplashViewModel
                userType = new global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Core_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_DataGrid_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Input_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Layout_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Markdown_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Media_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_1_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_2_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_2_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_3_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_3_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_4_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_4_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_5_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_6_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_6_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_7_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_7_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_8_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_8_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_9_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_9_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_10_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_10_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_11_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_11_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_12_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_12_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_13_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_13_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_14_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_15_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_15_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_16_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_16_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_17_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_17_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_18_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_18_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_19_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_19_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_20_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_20_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_21_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_21_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_22_Thickness_Left(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Left;
        }
        private void set_22_Thickness_Left(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Left = (global::System.Double)Value;
        }
        private object get_23_Thickness_Top(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Top;
        }
        private void set_23_Thickness_Top(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Top = (global::System.Double)Value;
        }
        private object get_24_Thickness_Right(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Right;
        }
        private void set_24_Thickness_Right(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Right = (global::System.Double)Value;
        }
        private object get_25_Thickness_Bottom(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Bottom;
        }
        private void set_25_Thickness_Bottom(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Bottom = (global::System.Double)Value;
        }
        private object get_26_CornerRadius_TopLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopLeft;
        }
        private void set_26_CornerRadius_TopLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopLeft = (global::System.Double)Value;
        }
        private object get_27_CornerRadius_TopRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopRight;
        }
        private void set_27_CornerRadius_TopRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopRight = (global::System.Double)Value;
        }
        private object get_28_CornerRadius_BottomRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomRight;
        }
        private void set_28_CornerRadius_BottomRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomRight = (global::System.Double)Value;
        }
        private object get_29_CornerRadius_BottomLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomLeft;
        }
        private void set_29_CornerRadius_BottomLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomLeft = (global::System.Double)Value;
        }
        private object get_30_ContainerPage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.ContainerPage)instance;
            return that.ViewModel;
        }
        private object get_31_HomePage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.HomePage)instance;
            return that.ViewModel;
        }
        private object get_32_ItemDetailPage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.ItemDetailPage)instance;
            return that.ViewModel;
        }
        private object get_33_ItemListDetailPage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.ItemListDetailPage)instance;
            return that.ViewModel;
        }
        private object get_34_AdaptiveGridView_DesiredWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.DesiredWidth;
        }
        private void set_34_AdaptiveGridView_DesiredWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            that.DesiredWidth = (global::System.Double)Value;
        }
        private object get_35_AdaptiveGridView_ItemHeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.ItemHeight;
        }
        private void set_35_AdaptiveGridView_ItemHeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_36_AdaptiveGridView_ItemClickCommand(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.ItemClickCommand;
        }
        private void set_36_AdaptiveGridView_ItemClickCommand(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            that.ItemClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_37_AdaptiveGridView_StretchContentForSingleRow(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.StretchContentForSingleRow;
        }
        private void set_37_AdaptiveGridView_StretchContentForSingleRow(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            that.StretchContentForSingleRow = (global::System.Boolean)Value;
        }
        private object get_38_AdaptiveGridView_OneRowModeEnabled(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.OneRowModeEnabled;
        }
        private void set_38_AdaptiveGridView_OneRowModeEnabled(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            that.OneRowModeEnabled = (global::System.Boolean)Value;
        }
        private object get_39_AdaptiveGridView_ItemsPanel(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView)instance;
            return that.ItemsPanel;
        }
        private object get_40_Connected_ListItemElementName(object instance)
        {
            return global::CommunityToolkit.WinUI.UI.Animations.Connected.GetListItemElementName((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_40_Connected_ListItemElementName(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.UI.Animations.Connected.SetListItemElementName((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_41_Connected_ListItemKey(object instance)
        {
            return global::CommunityToolkit.WinUI.UI.Animations.Connected.GetListItemKey((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_41_Connected_ListItemKey(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.UI.Animations.Connected.SetListItemKey((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_42_Connected_Key(object instance)
        {
            return global::CommunityToolkit.WinUI.UI.Animations.Connected.GetKey((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_42_Connected_Key(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.UI.Animations.Connected.SetKey((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_43_Connected_AnchorElement(object instance)
        {
            return global::CommunityToolkit.WinUI.UI.Animations.Connected.GetAnchorElement((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_43_Connected_AnchorElement(object instance, object Value)
        {
            global::CommunityToolkit.WinUI.UI.Animations.Connected.SetAnchorElement((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::Microsoft.UI.Xaml.UIElement)Value);
        }
        private object get_44_ItemListPage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.ItemListPage)instance;
            return that.ViewModel;
        }
        private object get_45_BoolToObjectConverter_TrueValue(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter)instance;
            return that.TrueValue;
        }
        private void set_45_BoolToObjectConverter_TrueValue(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter)instance;
            that.TrueValue = (global::System.Object)Value;
        }
        private object get_46_BoolToObjectConverter_FalseValue(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter)instance;
            return that.FalseValue;
        }
        private void set_46_BoolToObjectConverter_FalseValue(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter)instance;
            that.FalseValue = (global::System.Object)Value;
        }
        private object get_47_SplashPage_ViewModel(object instance)
        {
            var that = (global::GameZilla.Views.SplashPage)instance;
            return that.ViewModel;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GameZilla.GameZilla_XamlTypeInfo.XamlMember xamlMember = null;
            global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_1_WindowEx_WindowContent;
                xamlMember.Setter = set_1_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_2_WindowEx_MinWidth;
                xamlMember.Setter = set_2_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_3_WindowEx_MinHeight;
                xamlMember.Setter = set_3_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_4_WindowEx_PersistenceId;
                xamlMember.Setter = set_4_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_5_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_6_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_6_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_7_WindowEx_Title;
                xamlMember.Setter = set_7_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_8_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_8_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_9_WindowEx_IsMinimizable;
                xamlMember.Setter = set_9_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_10_WindowEx_IsMaximizable;
                xamlMember.Setter = set_10_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_11_WindowEx_IsResizable;
                xamlMember.Setter = set_11_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_12_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_12_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_13_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_13_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_14_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_15_WindowEx_PresenterKind;
                xamlMember.Setter = set_15_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_16_WindowEx_Width;
                xamlMember.Setter = set_16_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_17_WindowEx_Height;
                xamlMember.Setter = set_17_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_18_WindowEx_MaxWidth;
                xamlMember.Setter = set_18_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_19_WindowEx_MaxHeight;
                xamlMember.Setter = set_19_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_20_WindowEx_Backdrop;
                xamlMember.Setter = set_20_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MicaBackdrop_Kind;
                xamlMember.Setter = set_21_MicaBackdrop_Kind;
                break;
            case "Microsoft.UI.Xaml.Thickness.Left":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Left", "Double");
                xamlMember.Getter = get_22_Thickness_Left;
                xamlMember.Setter = set_22_Thickness_Left;
                break;
            case "Microsoft.UI.Xaml.Thickness.Top":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Top", "Double");
                xamlMember.Getter = get_23_Thickness_Top;
                xamlMember.Setter = set_23_Thickness_Top;
                break;
            case "Microsoft.UI.Xaml.Thickness.Right":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Right", "Double");
                xamlMember.Getter = get_24_Thickness_Right;
                xamlMember.Setter = set_24_Thickness_Right;
                break;
            case "Microsoft.UI.Xaml.Thickness.Bottom":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Bottom", "Double");
                xamlMember.Getter = get_25_Thickness_Bottom;
                xamlMember.Setter = set_25_Thickness_Bottom;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopLeft":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "TopLeft", "Double");
                xamlMember.Getter = get_26_CornerRadius_TopLeft;
                xamlMember.Setter = set_26_CornerRadius_TopLeft;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopRight":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "TopRight", "Double");
                xamlMember.Getter = get_27_CornerRadius_TopRight;
                xamlMember.Setter = set_27_CornerRadius_TopRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomRight":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "BottomRight", "Double");
                xamlMember.Getter = get_28_CornerRadius_BottomRight;
                xamlMember.Setter = set_28_CornerRadius_BottomRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomLeft":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "BottomLeft", "Double");
                xamlMember.Getter = get_29_CornerRadius_BottomLeft;
                xamlMember.Setter = set_29_CornerRadius_BottomLeft;
                break;
            case "GameZilla.Views.ContainerPage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.ContainerPage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.ContainerViewModel");
                xamlMember.Getter = get_30_ContainerPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GameZilla.Views.HomePage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.HomePage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.HomeViewModel");
                xamlMember.Getter = get_31_HomePage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GameZilla.Views.ItemDetailPage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.ItemDetailPage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.ItemDetailViewModel");
                xamlMember.Getter = get_32_ItemDetailPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GameZilla.Views.ItemListDetailPage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.ItemListDetailPage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.ItemListDetailViewModel");
                xamlMember.Getter = get_33_ItemListDetailPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.DesiredWidth":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "DesiredWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_AdaptiveGridView_DesiredWidth;
                xamlMember.Setter = set_34_AdaptiveGridView_DesiredWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.ItemHeight":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_AdaptiveGridView_ItemHeight;
                xamlMember.Setter = set_35_AdaptiveGridView_ItemHeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.ItemClickCommand":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_AdaptiveGridView_ItemClickCommand;
                xamlMember.Setter = set_36_AdaptiveGridView_ItemClickCommand;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.StretchContentForSingleRow":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "StretchContentForSingleRow", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_AdaptiveGridView_StretchContentForSingleRow;
                xamlMember.Setter = set_37_AdaptiveGridView_StretchContentForSingleRow;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.OneRowModeEnabled":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "OneRowModeEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_AdaptiveGridView_OneRowModeEnabled;
                xamlMember.Setter = set_38_AdaptiveGridView_OneRowModeEnabled;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView.ItemsPanel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.AdaptiveGridView");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ItemsPanel", "Microsoft.UI.Xaml.Controls.ItemsPanelTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_AdaptiveGridView_ItemsPanel;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Animations.Connected.ListItemElementName":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Animations.Connected");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ListItemElementName", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_40_Connected_ListItemElementName;
                xamlMember.Setter = set_40_Connected_ListItemElementName;
                break;
            case "CommunityToolkit.WinUI.UI.Animations.Connected.ListItemKey":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Animations.Connected");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ListItemKey", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_41_Connected_ListItemKey;
                xamlMember.Setter = set_41_Connected_ListItemKey;
                break;
            case "CommunityToolkit.WinUI.UI.Animations.Connected.Key":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Animations.Connected");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "Key", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_42_Connected_Key;
                xamlMember.Setter = set_42_Connected_Key;
                break;
            case "CommunityToolkit.WinUI.UI.Animations.Connected.AnchorElement":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Animations.Connected");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "AnchorElement", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_43_Connected_AnchorElement;
                xamlMember.Setter = set_43_Connected_AnchorElement;
                break;
            case "GameZilla.Views.ItemListPage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.ItemListPage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.ItemListViewModel");
                xamlMember.Getter = get_44_ItemListPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter.TrueValue":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "TrueValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_BoolToObjectConverter_TrueValue;
                xamlMember.Setter = set_45_BoolToObjectConverter_TrueValue;
                break;
            case "CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter.FalseValue":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Converters.BoolToObjectConverter");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "FalseValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_BoolToObjectConverter_FalseValue;
                xamlMember.Setter = set_46_BoolToObjectConverter_FalseValue;
                break;
            case "GameZilla.Views.SplashPage.ViewModel":
                userType = (global::GameZilla.GameZilla_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GameZilla.Views.SplashPage");
                xamlMember = new global::GameZilla.GameZilla_XamlTypeInfo.XamlMember(this, "ViewModel", "GameZilla.ViewModels.SplashViewModel");
                xamlMember.Getter = get_47_SplashPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GameZilla.GameZilla_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GameZilla.GameZilla_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

